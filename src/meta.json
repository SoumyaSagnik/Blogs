[
  {
    "id": 1,
    "topic": "JS Array Functions",
    "type": "js",
    "desc": "Commonly used array functions in JavaScript.",
    "link": "/js-array-functions",
    "search": ["javascript"]
  },
  {
    "id": 2,
    "topic": "CSS Specificity",
    "type": "css",
    "desc": "Specifictity in CSS.",
    "link": "/css-specificity",
    "search": ["style, specificity"]
  },
  {
    "id": 3,
    "topic": "Git",
    "type": "git",
    "desc": "An overview of git and commonly used git commands.",
    "link": "/git",
    "search": ["github", "version control"]
  },
  {
    "id": 4,
    "topic": "Hoisting in JS with var",
    "type": "js",
    "desc": "Understand hoisting in JavaScript using var.",
    "link": "/js-hoisting",
    "search": ["javascript"]
  },
  {
    "id": 5,
    "topic": "Internal Working of JS Functions",
    "type": "js",
    "desc": "A brief overview of how JavaScript functions run behind the scenes.",
    "link": "/js-iw-functions",
    "search": ["javascript"]
  },
  {
    "id": 6,
    "topic": "window & this keyword",
    "type": "js",
    "desc": "Introduction to window and this keyword in JavaScript.",
    "link": "/js-windowAndthis",
    "search": ["javascript"]
  },
  {
    "id": 7,
    "topic": "undefined vs not defined in JS",
    "type": "js",
    "desc": "Understand the significane of undefined.",
    "link": "/js-undefinedVsNotDefined",
    "search": ["javascript"]
  },
  {
    "id": 8,
    "topic": "JS is a loosely typed language",
    "type": "js",
    "desc": "Understand what a loosely typed language is.",
    "link": "/js-loosely-typed",
    "search": ["javascript"]
  },
  {
    "id": 9,
    "topic": "Scope & Lexical Environment in JS",
    "type": "js",
    "desc": "Deep dive into scope chain and lexical environment in JavaScript.",
    "link": "/js-scope&le",
    "search": ["javascript"]
  },
  {
    "id": 10,
    "topic": "Hoisting in JS with let and const",
    "type": "js",
    "desc": "An overview of how hoisting works with let and const.",
    "link": "/js-hoisting-let&const",
    "search": ["javascript"]
  },
  {
    "id": 11,
    "topic": "Types of Errors in JS",
    "type": "js",
    "desc": "Common types of errors in JavaScript with examples.",
    "link": "/js-errors",
    "search": ["javascript"]
  },
  {
    "id": 12,
    "topic": "Block Scope & Shadowing in JS",
    "type": "js",
    "desc": "Deep dive into blocks, block scope and an overview of shadowing in JavaScript.",
    "link": "/js-block&shadowing",
    "search": ["javascript"]
  },
  {
    "id": 13,
    "topic": "Closures in JS",
    "type": "js",
    "desc": "Deep dive into closures in JavaScript.",
    "link": "/js-closures",
    "search": ["javascript"]
  },
  {
    "id": 14,
    "topic": "JS Interview Questions",
    "type": "js",
    "desc": "Output based interview qustions in JavaScript.",
    "link": "/js-interview",
    "search": ["javascript, interview, questions"]
  },
  {
    "id": 15,
    "topic": "Commonly used jargons in JS",
    "type": "js",
    "desc": "Brief explanation of some of the commonly used jargons in JavaScript with examples.",
    "link": "/js-jargons",
    "search": ["javascript"]
  },
  {
    "id": 16,
    "topic": "Callback Functions in JS",
    "type": "js",
    "desc": "Brief Explanation of callback functions in JS. Importance of removing event listners.",
    "link": "/js-callback",
    "search": ["javascript"]
  },
  {
    "id": 17,
    "topic": "Event Loop in JS",
    "type": "js",
    "desc": "In depth explanation of event loop in JavaScript, along with internal working of setTimeout, eventListener and fetch.",
    "link": "/js-eventLoop",
    "search": ["javascript"]
  },
  {
    "id": 18,
    "topic": "Optional Chaining in JS",
    "type": "js",
    "desc": "Brief overview of optional chaining in JavaScript.",
    "link": "/js-optionalChaining",
    "search": ["javascript"]
  },
  {
    "id": 19,
    "topic": "Nullish Coalescing in JS",
    "type": "js",
    "desc": "Brief overview of the nullish coalescing operator (??) in JavaScript.",
    "link": "/js-nullish",
    "search": ["javascript"]
  },
  {
    "id": 20,
    "topic": "Factory & Constructor function in JS",
    "type": "js",
    "desc": "Brief overview of factory function and constructor function in JavaScript.",
    "link": "/js-factory-constructor",
    "search": ["javascript"]
  },
  {
    "id": 21,
    "topic": "Constructor property in JS",
    "type": "js",
    "desc": "Deep dive into the constructor property in JavaScript.",
    "link": "/js-constructorProperty",
    "search": ["javascript"]
  },
  {
    "id": 22,
    "topic": "Primitive vs Reference type in JS",
    "type": "js",
    "desc": "Brief description of how primitives differ from reference types in JavaScript.",
    "link": "/js-primitiveVsReference",
    "search": ["javascript"]
  },
  {
    "id": 23,
    "topic": "for-in & for-of loop in JS",
    "type": "js",
    "desc": "Iterating through objects using for-in & iterables using for-of loop in JavaScript.",
    "link": "/js-forIn&forOf",
    "search": ["javascript"]
  },
  {
    "id": 24,
    "topic": "Object cloning in JS",
    "type": "js",
    "desc": "Different ways of cloning an object in JavaScript.",
    "link": "/js-objectCloning",
    "search": ["javascript"]
  },
  {
    "id": 25,
    "topic": "Debounce & Throttle in JS",
    "type": "js",
    "desc": "Debounce and throttle in JavaScript along with implementation.",
    "link": "/js-debounce&Throttle",
    "search": ["javascript, throttle"]
  },
  {
    "id": 26,
    "topic": "Mimicking lifecycle methods with hooks",
    "type": "react",
    "desc": "Using the useEffect hook to mimic componentDidMount, componenetDidUpdate, and componentWillUpdate.",
    "link": "/react-MimicLifecycle",
    "search": ["useEffect, lifecycle, hooks, react"]
  }
]
